// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.1
// source: src/app/game.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export enum Player {
  INVALID = 0,
  BLUE = 1,
  RED = 2,
  GREEN = 3,
  YELLOW = 4,
  SKY = 5,
  VIOLET = 6,
  ORANGE = 7,
  PINK = 8,
  OBSERVER = 9,
  UNRECOGNIZED = -1,
}

export function playerFromJSON(object: any): Player {
  switch (object) {
    case 0:
    case "INVALID":
      return Player.INVALID;
    case 1:
    case "BLUE":
      return Player.BLUE;
    case 2:
    case "RED":
      return Player.RED;
    case 3:
    case "GREEN":
      return Player.GREEN;
    case 4:
    case "YELLOW":
      return Player.YELLOW;
    case 5:
    case "SKY":
      return Player.SKY;
    case 6:
    case "VIOLET":
      return Player.VIOLET;
    case 7:
    case "ORANGE":
      return Player.ORANGE;
    case 8:
    case "PINK":
      return Player.PINK;
    case 9:
    case "OBSERVER":
      return Player.OBSERVER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Player.UNRECOGNIZED;
  }
}

export function playerToJSON(object: Player): string {
  switch (object) {
    case Player.INVALID:
      return "INVALID";
    case Player.BLUE:
      return "BLUE";
    case Player.RED:
      return "RED";
    case Player.GREEN:
      return "GREEN";
    case Player.YELLOW:
      return "YELLOW";
    case Player.SKY:
      return "SKY";
    case Player.VIOLET:
      return "VIOLET";
    case Player.ORANGE:
      return "ORANGE";
    case Player.PINK:
      return "PINK";
    case Player.OBSERVER:
      return "OBSERVER";
    case Player.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WoodType {
  NO_TYPE = 0,
  OAK = 1,
  SPRUCE = 2,
  BIRCH = 3,
  JUNGLE = 4,
  ACACIA = 5,
  DARK_OAK = 6,
  MANGROVE = 7,
  CHERRY = 8,
  CRIMSON = 9,
  WARPED = 10,
  UNRECOGNIZED = -1,
}

export function woodTypeFromJSON(object: any): WoodType {
  switch (object) {
    case 0:
    case "NO_TYPE":
      return WoodType.NO_TYPE;
    case 1:
    case "OAK":
      return WoodType.OAK;
    case 2:
    case "SPRUCE":
      return WoodType.SPRUCE;
    case 3:
    case "BIRCH":
      return WoodType.BIRCH;
    case 4:
    case "JUNGLE":
      return WoodType.JUNGLE;
    case 5:
    case "ACACIA":
      return WoodType.ACACIA;
    case 6:
    case "DARK_OAK":
      return WoodType.DARK_OAK;
    case 7:
    case "MANGROVE":
      return WoodType.MANGROVE;
    case 8:
    case "CHERRY":
      return WoodType.CHERRY;
    case 9:
    case "CRIMSON":
      return WoodType.CRIMSON;
    case 10:
    case "WARPED":
      return WoodType.WARPED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WoodType.UNRECOGNIZED;
  }
}

export function woodTypeToJSON(object: WoodType): string {
  switch (object) {
    case WoodType.NO_TYPE:
      return "NO_TYPE";
    case WoodType.OAK:
      return "OAK";
    case WoodType.SPRUCE:
      return "SPRUCE";
    case WoodType.BIRCH:
      return "BIRCH";
    case WoodType.JUNGLE:
      return "JUNGLE";
    case WoodType.ACACIA:
      return "ACACIA";
    case WoodType.DARK_OAK:
      return "DARK_OAK";
    case WoodType.MANGROVE:
      return "MANGROVE";
    case WoodType.CHERRY:
      return "CHERRY";
    case WoodType.CRIMSON:
      return "CRIMSON";
    case WoodType.WARPED:
      return "WARPED";
    case WoodType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Direction {
  NO_DIRECTION = 0,
  RIGHT = 1,
  UP = 2,
  LEFT = 3,
  DOWN = 4,
  UNRECOGNIZED = -1,
}

export function directionFromJSON(object: any): Direction {
  switch (object) {
    case 0:
    case "NO_DIRECTION":
      return Direction.NO_DIRECTION;
    case 1:
    case "RIGHT":
      return Direction.RIGHT;
    case 2:
    case "UP":
      return Direction.UP;
    case 3:
    case "LEFT":
      return Direction.LEFT;
    case 4:
    case "DOWN":
      return Direction.DOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Direction.UNRECOGNIZED;
  }
}

export function directionToJSON(object: Direction): string {
  switch (object) {
    case Direction.NO_DIRECTION:
      return "NO_DIRECTION";
    case Direction.RIGHT:
      return "RIGHT";
    case Direction.UP:
      return "UP";
    case Direction.LEFT:
      return "LEFT";
    case Direction.DOWN:
      return "DOWN";
    case Direction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Door {
  /** -1: infinite (someone is on a related pressure plate), 0: closed */
  remainingOpenTicks: number;
  woodType: WoodType;
  /** the door is facing this direction */
  direction: Direction;
}

export interface CellType {
  bedrockCell?: CellType_BedrockCell | undefined;
  stoneCell?: CellType_StoneCell | undefined;
  emptyCell?: CellType_EmptyCell | undefined;
  pressurePlateCell?: CellType_PressurePlateCell | undefined;
  chestCell?: CellType_ChestCell | undefined;
  invisibleCell?: CellType_InvisibleCell | undefined;
}

export interface CellType_BedrockCell {
}

export interface CellType_StoneCell {
  mineCount: number;
  lastMineTick: number;
}

export interface CellType_EmptyCell {
  door: Door | undefined;
}

export interface CellType_PressurePlateCell {
  woodType: WoodType;
}

export interface CellType_ChestCell {
  score: number;
}

export interface CellType_InvisibleCell {
}

export interface Cell {
  cellType:
    | CellType
    | undefined;
  /** Cell is not visited If not set or INVALID. */
  firstVisitPlayer: Player;
}

export interface Row {
  cells: Cell[];
}

export interface PlayerInfo {
  player: Player;
  position: Coordinates | undefined;
  signal: Signal | undefined;
  remainingTimeMs: number;
}

export interface Grid {
  rows: Row[];
  playerInfos: PlayerInfo[];
}

export interface Game {
  players: Player[];
  assignedColor: Player;
  width: number;
  height: number;
  gameLength: number;
  currentTick: number;
  grid: Grid | undefined;
}

export interface Coordinates {
  x: number;
  y: number;
}

export interface GridUpdate {
  cellUpdates: GridUpdate_CellUpdate[];
  playerInfoUpdates: PlayerInfo[];
}

export interface GridUpdate_CellUpdate {
  coordinates: Coordinates | undefined;
  cell: Cell | undefined;
}

export interface GameRequest {
  shouldAct?: boolean | undefined;
  initializeGame?: Game | undefined;
  tick?: boolean | undefined;
  gridUpdate?: GridUpdate | undefined;
}

export interface Move {
  /** 0 if no move */
  direction: Direction;
}

export interface Mine {
  direction: Direction;
}

export interface Action {
  move?: Move | undefined;
  mine?: Mine | undefined;
}

export interface Signal {
  woodType: WoodType;
}

export interface GameResponse {
  action: Action | undefined;
  signal: Signal | undefined;
}

export interface GameMap {
  players: Player[];
  /** square map */
  lengthUnits: number;
  grid: Grid | undefined;
}

export interface GameConfig {
  players: GameConfig_PlayerConfig[];
  gameMap: GameMap | undefined;
  gameLength: number;
}

export interface GameConfig_PlayerConfig {
  player: Player;
  description: string;
  strategy: string;
  config: string;
}

function createBaseDoor(): Door {
  return { remainingOpenTicks: 0, woodType: 0, direction: 0 };
}

export const Door = {
  encode(message: Door, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.remainingOpenTicks !== 0) {
      writer.uint32(8).int32(message.remainingOpenTicks);
    }
    if (message.woodType !== 0) {
      writer.uint32(16).int32(message.woodType);
    }
    if (message.direction !== 0) {
      writer.uint32(24).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Door {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.remainingOpenTicks = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.woodType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Door {
    return {
      remainingOpenTicks: isSet(object.remainingOpenTicks) ? globalThis.Number(object.remainingOpenTicks) : 0,
      woodType: isSet(object.woodType) ? woodTypeFromJSON(object.woodType) : 0,
      direction: isSet(object.direction) ? directionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: Door): unknown {
    const obj: any = {};
    if (message.remainingOpenTicks !== 0) {
      obj.remainingOpenTicks = Math.round(message.remainingOpenTicks);
    }
    if (message.woodType !== 0) {
      obj.woodType = woodTypeToJSON(message.woodType);
    }
    if (message.direction !== 0) {
      obj.direction = directionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Door>, I>>(base?: I): Door {
    return Door.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Door>, I>>(object: I): Door {
    const message = createBaseDoor();
    message.remainingOpenTicks = object.remainingOpenTicks ?? 0;
    message.woodType = object.woodType ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseCellType(): CellType {
  return {
    bedrockCell: undefined,
    stoneCell: undefined,
    emptyCell: undefined,
    pressurePlateCell: undefined,
    chestCell: undefined,
    invisibleCell: undefined,
  };
}

export const CellType = {
  encode(message: CellType, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bedrockCell !== undefined) {
      CellType_BedrockCell.encode(message.bedrockCell, writer.uint32(10).fork()).ldelim();
    }
    if (message.stoneCell !== undefined) {
      CellType_StoneCell.encode(message.stoneCell, writer.uint32(18).fork()).ldelim();
    }
    if (message.emptyCell !== undefined) {
      CellType_EmptyCell.encode(message.emptyCell, writer.uint32(26).fork()).ldelim();
    }
    if (message.pressurePlateCell !== undefined) {
      CellType_PressurePlateCell.encode(message.pressurePlateCell, writer.uint32(34).fork()).ldelim();
    }
    if (message.chestCell !== undefined) {
      CellType_ChestCell.encode(message.chestCell, writer.uint32(42).fork()).ldelim();
    }
    if (message.invisibleCell !== undefined) {
      CellType_InvisibleCell.encode(message.invisibleCell, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CellType {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCellType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bedrockCell = CellType_BedrockCell.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stoneCell = CellType_StoneCell.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.emptyCell = CellType_EmptyCell.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pressurePlateCell = CellType_PressurePlateCell.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.chestCell = CellType_ChestCell.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.invisibleCell = CellType_InvisibleCell.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CellType {
    return {
      bedrockCell: isSet(object.bedrockCell) ? CellType_BedrockCell.fromJSON(object.bedrockCell) : undefined,
      stoneCell: isSet(object.stoneCell) ? CellType_StoneCell.fromJSON(object.stoneCell) : undefined,
      emptyCell: isSet(object.emptyCell) ? CellType_EmptyCell.fromJSON(object.emptyCell) : undefined,
      pressurePlateCell: isSet(object.pressurePlateCell)
        ? CellType_PressurePlateCell.fromJSON(object.pressurePlateCell)
        : undefined,
      chestCell: isSet(object.chestCell) ? CellType_ChestCell.fromJSON(object.chestCell) : undefined,
      invisibleCell: isSet(object.invisibleCell) ? CellType_InvisibleCell.fromJSON(object.invisibleCell) : undefined,
    };
  },

  toJSON(message: CellType): unknown {
    const obj: any = {};
    if (message.bedrockCell !== undefined) {
      obj.bedrockCell = CellType_BedrockCell.toJSON(message.bedrockCell);
    }
    if (message.stoneCell !== undefined) {
      obj.stoneCell = CellType_StoneCell.toJSON(message.stoneCell);
    }
    if (message.emptyCell !== undefined) {
      obj.emptyCell = CellType_EmptyCell.toJSON(message.emptyCell);
    }
    if (message.pressurePlateCell !== undefined) {
      obj.pressurePlateCell = CellType_PressurePlateCell.toJSON(message.pressurePlateCell);
    }
    if (message.chestCell !== undefined) {
      obj.chestCell = CellType_ChestCell.toJSON(message.chestCell);
    }
    if (message.invisibleCell !== undefined) {
      obj.invisibleCell = CellType_InvisibleCell.toJSON(message.invisibleCell);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CellType>, I>>(base?: I): CellType {
    return CellType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CellType>, I>>(object: I): CellType {
    const message = createBaseCellType();
    message.bedrockCell = (object.bedrockCell !== undefined && object.bedrockCell !== null)
      ? CellType_BedrockCell.fromPartial(object.bedrockCell)
      : undefined;
    message.stoneCell = (object.stoneCell !== undefined && object.stoneCell !== null)
      ? CellType_StoneCell.fromPartial(object.stoneCell)
      : undefined;
    message.emptyCell = (object.emptyCell !== undefined && object.emptyCell !== null)
      ? CellType_EmptyCell.fromPartial(object.emptyCell)
      : undefined;
    message.pressurePlateCell = (object.pressurePlateCell !== undefined && object.pressurePlateCell !== null)
      ? CellType_PressurePlateCell.fromPartial(object.pressurePlateCell)
      : undefined;
    message.chestCell = (object.chestCell !== undefined && object.chestCell !== null)
      ? CellType_ChestCell.fromPartial(object.chestCell)
      : undefined;
    message.invisibleCell = (object.invisibleCell !== undefined && object.invisibleCell !== null)
      ? CellType_InvisibleCell.fromPartial(object.invisibleCell)
      : undefined;
    return message;
  },
};

function createBaseCellType_BedrockCell(): CellType_BedrockCell {
  return {};
}

export const CellType_BedrockCell = {
  encode(_: CellType_BedrockCell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CellType_BedrockCell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCellType_BedrockCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CellType_BedrockCell {
    return {};
  },

  toJSON(_: CellType_BedrockCell): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CellType_BedrockCell>, I>>(base?: I): CellType_BedrockCell {
    return CellType_BedrockCell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CellType_BedrockCell>, I>>(_: I): CellType_BedrockCell {
    const message = createBaseCellType_BedrockCell();
    return message;
  },
};

function createBaseCellType_StoneCell(): CellType_StoneCell {
  return { mineCount: 0, lastMineTick: 0 };
}

export const CellType_StoneCell = {
  encode(message: CellType_StoneCell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mineCount !== 0) {
      writer.uint32(8).int32(message.mineCount);
    }
    if (message.lastMineTick !== 0) {
      writer.uint32(16).int32(message.lastMineTick);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CellType_StoneCell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCellType_StoneCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mineCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lastMineTick = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CellType_StoneCell {
    return {
      mineCount: isSet(object.mineCount) ? globalThis.Number(object.mineCount) : 0,
      lastMineTick: isSet(object.lastMineTick) ? globalThis.Number(object.lastMineTick) : 0,
    };
  },

  toJSON(message: CellType_StoneCell): unknown {
    const obj: any = {};
    if (message.mineCount !== 0) {
      obj.mineCount = Math.round(message.mineCount);
    }
    if (message.lastMineTick !== 0) {
      obj.lastMineTick = Math.round(message.lastMineTick);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CellType_StoneCell>, I>>(base?: I): CellType_StoneCell {
    return CellType_StoneCell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CellType_StoneCell>, I>>(object: I): CellType_StoneCell {
    const message = createBaseCellType_StoneCell();
    message.mineCount = object.mineCount ?? 0;
    message.lastMineTick = object.lastMineTick ?? 0;
    return message;
  },
};

function createBaseCellType_EmptyCell(): CellType_EmptyCell {
  return { door: undefined };
}

export const CellType_EmptyCell = {
  encode(message: CellType_EmptyCell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.door !== undefined) {
      Door.encode(message.door, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CellType_EmptyCell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCellType_EmptyCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.door = Door.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CellType_EmptyCell {
    return { door: isSet(object.door) ? Door.fromJSON(object.door) : undefined };
  },

  toJSON(message: CellType_EmptyCell): unknown {
    const obj: any = {};
    if (message.door !== undefined) {
      obj.door = Door.toJSON(message.door);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CellType_EmptyCell>, I>>(base?: I): CellType_EmptyCell {
    return CellType_EmptyCell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CellType_EmptyCell>, I>>(object: I): CellType_EmptyCell {
    const message = createBaseCellType_EmptyCell();
    message.door = (object.door !== undefined && object.door !== null) ? Door.fromPartial(object.door) : undefined;
    return message;
  },
};

function createBaseCellType_PressurePlateCell(): CellType_PressurePlateCell {
  return { woodType: 0 };
}

export const CellType_PressurePlateCell = {
  encode(message: CellType_PressurePlateCell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.woodType !== 0) {
      writer.uint32(8).int32(message.woodType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CellType_PressurePlateCell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCellType_PressurePlateCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.woodType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CellType_PressurePlateCell {
    return { woodType: isSet(object.woodType) ? woodTypeFromJSON(object.woodType) : 0 };
  },

  toJSON(message: CellType_PressurePlateCell): unknown {
    const obj: any = {};
    if (message.woodType !== 0) {
      obj.woodType = woodTypeToJSON(message.woodType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CellType_PressurePlateCell>, I>>(base?: I): CellType_PressurePlateCell {
    return CellType_PressurePlateCell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CellType_PressurePlateCell>, I>>(object: I): CellType_PressurePlateCell {
    const message = createBaseCellType_PressurePlateCell();
    message.woodType = object.woodType ?? 0;
    return message;
  },
};

function createBaseCellType_ChestCell(): CellType_ChestCell {
  return { score: 0 };
}

export const CellType_ChestCell = {
  encode(message: CellType_ChestCell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.score !== 0) {
      writer.uint32(8).int32(message.score);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CellType_ChestCell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCellType_ChestCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.score = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CellType_ChestCell {
    return { score: isSet(object.score) ? globalThis.Number(object.score) : 0 };
  },

  toJSON(message: CellType_ChestCell): unknown {
    const obj: any = {};
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CellType_ChestCell>, I>>(base?: I): CellType_ChestCell {
    return CellType_ChestCell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CellType_ChestCell>, I>>(object: I): CellType_ChestCell {
    const message = createBaseCellType_ChestCell();
    message.score = object.score ?? 0;
    return message;
  },
};

function createBaseCellType_InvisibleCell(): CellType_InvisibleCell {
  return {};
}

export const CellType_InvisibleCell = {
  encode(_: CellType_InvisibleCell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CellType_InvisibleCell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCellType_InvisibleCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CellType_InvisibleCell {
    return {};
  },

  toJSON(_: CellType_InvisibleCell): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CellType_InvisibleCell>, I>>(base?: I): CellType_InvisibleCell {
    return CellType_InvisibleCell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CellType_InvisibleCell>, I>>(_: I): CellType_InvisibleCell {
    const message = createBaseCellType_InvisibleCell();
    return message;
  },
};

function createBaseCell(): Cell {
  return { cellType: undefined, firstVisitPlayer: 0 };
}

export const Cell = {
  encode(message: Cell, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cellType !== undefined) {
      CellType.encode(message.cellType, writer.uint32(18).fork()).ldelim();
    }
    if (message.firstVisitPlayer !== 0) {
      writer.uint32(24).int32(message.firstVisitPlayer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Cell {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCell();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cellType = CellType.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.firstVisitPlayer = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cell {
    return {
      cellType: isSet(object.cellType) ? CellType.fromJSON(object.cellType) : undefined,
      firstVisitPlayer: isSet(object.firstVisitPlayer) ? playerFromJSON(object.firstVisitPlayer) : 0,
    };
  },

  toJSON(message: Cell): unknown {
    const obj: any = {};
    if (message.cellType !== undefined) {
      obj.cellType = CellType.toJSON(message.cellType);
    }
    if (message.firstVisitPlayer !== 0) {
      obj.firstVisitPlayer = playerToJSON(message.firstVisitPlayer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Cell>, I>>(base?: I): Cell {
    return Cell.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Cell>, I>>(object: I): Cell {
    const message = createBaseCell();
    message.cellType = (object.cellType !== undefined && object.cellType !== null)
      ? CellType.fromPartial(object.cellType)
      : undefined;
    message.firstVisitPlayer = object.firstVisitPlayer ?? 0;
    return message;
  },
};

function createBaseRow(): Row {
  return { cells: [] };
}

export const Row = {
  encode(message: Row, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.cells) {
      Cell.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Row {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cells.push(Cell.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Row {
    return { cells: globalThis.Array.isArray(object?.cells) ? object.cells.map((e: any) => Cell.fromJSON(e)) : [] };
  },

  toJSON(message: Row): unknown {
    const obj: any = {};
    if (message.cells?.length) {
      obj.cells = message.cells.map((e) => Cell.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Row>, I>>(base?: I): Row {
    return Row.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Row>, I>>(object: I): Row {
    const message = createBaseRow();
    message.cells = object.cells?.map((e) => Cell.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlayerInfo(): PlayerInfo {
  return { player: 0, position: undefined, signal: undefined, remainingTimeMs: 0 };
}

export const PlayerInfo = {
  encode(message: PlayerInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.player !== 0) {
      writer.uint32(8).int32(message.player);
    }
    if (message.position !== undefined) {
      Coordinates.encode(message.position, writer.uint32(18).fork()).ldelim();
    }
    if (message.signal !== undefined) {
      Signal.encode(message.signal, writer.uint32(26).fork()).ldelim();
    }
    if (message.remainingTimeMs !== 0) {
      writer.uint32(32).int32(message.remainingTimeMs);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.player = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.position = Coordinates.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signal = Signal.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.remainingTimeMs = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerInfo {
    return {
      player: isSet(object.player) ? playerFromJSON(object.player) : 0,
      position: isSet(object.position) ? Coordinates.fromJSON(object.position) : undefined,
      signal: isSet(object.signal) ? Signal.fromJSON(object.signal) : undefined,
      remainingTimeMs: isSet(object.remainingTimeMs) ? globalThis.Number(object.remainingTimeMs) : 0,
    };
  },

  toJSON(message: PlayerInfo): unknown {
    const obj: any = {};
    if (message.player !== 0) {
      obj.player = playerToJSON(message.player);
    }
    if (message.position !== undefined) {
      obj.position = Coordinates.toJSON(message.position);
    }
    if (message.signal !== undefined) {
      obj.signal = Signal.toJSON(message.signal);
    }
    if (message.remainingTimeMs !== 0) {
      obj.remainingTimeMs = Math.round(message.remainingTimeMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerInfo>, I>>(base?: I): PlayerInfo {
    return PlayerInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerInfo>, I>>(object: I): PlayerInfo {
    const message = createBasePlayerInfo();
    message.player = object.player ?? 0;
    message.position = (object.position !== undefined && object.position !== null)
      ? Coordinates.fromPartial(object.position)
      : undefined;
    message.signal = (object.signal !== undefined && object.signal !== null)
      ? Signal.fromPartial(object.signal)
      : undefined;
    message.remainingTimeMs = object.remainingTimeMs ?? 0;
    return message;
  },
};

function createBaseGrid(): Grid {
  return { rows: [], playerInfos: [] };
}

export const Grid = {
  encode(message: Grid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.rows) {
      Row.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.playerInfos) {
      PlayerInfo.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Grid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rows.push(Row.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playerInfos.push(PlayerInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grid {
    return {
      rows: globalThis.Array.isArray(object?.rows) ? object.rows.map((e: any) => Row.fromJSON(e)) : [],
      playerInfos: globalThis.Array.isArray(object?.playerInfos)
        ? object.playerInfos.map((e: any) => PlayerInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Grid): unknown {
    const obj: any = {};
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => Row.toJSON(e));
    }
    if (message.playerInfos?.length) {
      obj.playerInfos = message.playerInfos.map((e) => PlayerInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Grid>, I>>(base?: I): Grid {
    return Grid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Grid>, I>>(object: I): Grid {
    const message = createBaseGrid();
    message.rows = object.rows?.map((e) => Row.fromPartial(e)) || [];
    message.playerInfos = object.playerInfos?.map((e) => PlayerInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGame(): Game {
  return { players: [], assignedColor: 0, width: 0, height: 0, gameLength: 0, currentTick: 0, grid: undefined };
}

export const Game = {
  encode(message: Game, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.players) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.assignedColor !== 0) {
      writer.uint32(16).int32(message.assignedColor);
    }
    if (message.width !== 0) {
      writer.uint32(24).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(32).int32(message.height);
    }
    if (message.gameLength !== 0) {
      writer.uint32(40).int32(message.gameLength);
    }
    if (message.currentTick !== 0) {
      writer.uint32(48).int32(message.currentTick);
    }
    if (message.grid !== undefined) {
      Grid.encode(message.grid, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Game {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.players.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.players.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.assignedColor = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.width = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.height = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.gameLength = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.currentTick = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.grid = Grid.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game {
    return {
      players: globalThis.Array.isArray(object?.players) ? object.players.map((e: any) => playerFromJSON(e)) : [],
      assignedColor: isSet(object.assignedColor) ? playerFromJSON(object.assignedColor) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      gameLength: isSet(object.gameLength) ? globalThis.Number(object.gameLength) : 0,
      currentTick: isSet(object.currentTick) ? globalThis.Number(object.currentTick) : 0,
      grid: isSet(object.grid) ? Grid.fromJSON(object.grid) : undefined,
    };
  },

  toJSON(message: Game): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => playerToJSON(e));
    }
    if (message.assignedColor !== 0) {
      obj.assignedColor = playerToJSON(message.assignedColor);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.gameLength !== 0) {
      obj.gameLength = Math.round(message.gameLength);
    }
    if (message.currentTick !== 0) {
      obj.currentTick = Math.round(message.currentTick);
    }
    if (message.grid !== undefined) {
      obj.grid = Grid.toJSON(message.grid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game>, I>>(base?: I): Game {
    return Game.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game>, I>>(object: I): Game {
    const message = createBaseGame();
    message.players = object.players?.map((e) => e) || [];
    message.assignedColor = object.assignedColor ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.gameLength = object.gameLength ?? 0;
    message.currentTick = object.currentTick ?? 0;
    message.grid = (object.grid !== undefined && object.grid !== null) ? Grid.fromPartial(object.grid) : undefined;
    return message;
  },
};

function createBaseCoordinates(): Coordinates {
  return { x: 0, y: 0 };
}

export const Coordinates = {
  encode(message: Coordinates, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Coordinates {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCoordinates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Coordinates {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Coordinates): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Coordinates>, I>>(base?: I): Coordinates {
    return Coordinates.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Coordinates>, I>>(object: I): Coordinates {
    const message = createBaseCoordinates();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseGridUpdate(): GridUpdate {
  return { cellUpdates: [], playerInfoUpdates: [] };
}

export const GridUpdate = {
  encode(message: GridUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.cellUpdates) {
      GridUpdate_CellUpdate.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.playerInfoUpdates) {
      PlayerInfo.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GridUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGridUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cellUpdates.push(GridUpdate_CellUpdate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.playerInfoUpdates.push(PlayerInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GridUpdate {
    return {
      cellUpdates: globalThis.Array.isArray(object?.cellUpdates)
        ? object.cellUpdates.map((e: any) => GridUpdate_CellUpdate.fromJSON(e))
        : [],
      playerInfoUpdates: globalThis.Array.isArray(object?.playerInfoUpdates)
        ? object.playerInfoUpdates.map((e: any) => PlayerInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GridUpdate): unknown {
    const obj: any = {};
    if (message.cellUpdates?.length) {
      obj.cellUpdates = message.cellUpdates.map((e) => GridUpdate_CellUpdate.toJSON(e));
    }
    if (message.playerInfoUpdates?.length) {
      obj.playerInfoUpdates = message.playerInfoUpdates.map((e) => PlayerInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GridUpdate>, I>>(base?: I): GridUpdate {
    return GridUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GridUpdate>, I>>(object: I): GridUpdate {
    const message = createBaseGridUpdate();
    message.cellUpdates = object.cellUpdates?.map((e) => GridUpdate_CellUpdate.fromPartial(e)) || [];
    message.playerInfoUpdates = object.playerInfoUpdates?.map((e) => PlayerInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGridUpdate_CellUpdate(): GridUpdate_CellUpdate {
  return { coordinates: undefined, cell: undefined };
}

export const GridUpdate_CellUpdate = {
  encode(message: GridUpdate_CellUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.coordinates !== undefined) {
      Coordinates.encode(message.coordinates, writer.uint32(10).fork()).ldelim();
    }
    if (message.cell !== undefined) {
      Cell.encode(message.cell, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GridUpdate_CellUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGridUpdate_CellUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.coordinates = Coordinates.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cell = Cell.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GridUpdate_CellUpdate {
    return {
      coordinates: isSet(object.coordinates) ? Coordinates.fromJSON(object.coordinates) : undefined,
      cell: isSet(object.cell) ? Cell.fromJSON(object.cell) : undefined,
    };
  },

  toJSON(message: GridUpdate_CellUpdate): unknown {
    const obj: any = {};
    if (message.coordinates !== undefined) {
      obj.coordinates = Coordinates.toJSON(message.coordinates);
    }
    if (message.cell !== undefined) {
      obj.cell = Cell.toJSON(message.cell);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GridUpdate_CellUpdate>, I>>(base?: I): GridUpdate_CellUpdate {
    return GridUpdate_CellUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GridUpdate_CellUpdate>, I>>(object: I): GridUpdate_CellUpdate {
    const message = createBaseGridUpdate_CellUpdate();
    message.coordinates = (object.coordinates !== undefined && object.coordinates !== null)
      ? Coordinates.fromPartial(object.coordinates)
      : undefined;
    message.cell = (object.cell !== undefined && object.cell !== null) ? Cell.fromPartial(object.cell) : undefined;
    return message;
  },
};

function createBaseGameRequest(): GameRequest {
  return { shouldAct: undefined, initializeGame: undefined, tick: undefined, gridUpdate: undefined };
}

export const GameRequest = {
  encode(message: GameRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.shouldAct !== undefined) {
      writer.uint32(8).bool(message.shouldAct);
    }
    if (message.initializeGame !== undefined) {
      Game.encode(message.initializeGame, writer.uint32(18).fork()).ldelim();
    }
    if (message.tick !== undefined) {
      writer.uint32(24).bool(message.tick);
    }
    if (message.gridUpdate !== undefined) {
      GridUpdate.encode(message.gridUpdate, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.shouldAct = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.initializeGame = Game.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.tick = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gridUpdate = GridUpdate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameRequest {
    return {
      shouldAct: isSet(object.shouldAct) ? globalThis.Boolean(object.shouldAct) : undefined,
      initializeGame: isSet(object.initializeGame) ? Game.fromJSON(object.initializeGame) : undefined,
      tick: isSet(object.tick) ? globalThis.Boolean(object.tick) : undefined,
      gridUpdate: isSet(object.gridUpdate) ? GridUpdate.fromJSON(object.gridUpdate) : undefined,
    };
  },

  toJSON(message: GameRequest): unknown {
    const obj: any = {};
    if (message.shouldAct !== undefined) {
      obj.shouldAct = message.shouldAct;
    }
    if (message.initializeGame !== undefined) {
      obj.initializeGame = Game.toJSON(message.initializeGame);
    }
    if (message.tick !== undefined) {
      obj.tick = message.tick;
    }
    if (message.gridUpdate !== undefined) {
      obj.gridUpdate = GridUpdate.toJSON(message.gridUpdate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameRequest>, I>>(base?: I): GameRequest {
    return GameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameRequest>, I>>(object: I): GameRequest {
    const message = createBaseGameRequest();
    message.shouldAct = object.shouldAct ?? undefined;
    message.initializeGame = (object.initializeGame !== undefined && object.initializeGame !== null)
      ? Game.fromPartial(object.initializeGame)
      : undefined;
    message.tick = object.tick ?? undefined;
    message.gridUpdate = (object.gridUpdate !== undefined && object.gridUpdate !== null)
      ? GridUpdate.fromPartial(object.gridUpdate)
      : undefined;
    return message;
  },
};

function createBaseMove(): Move {
  return { direction: 0 };
}

export const Move = {
  encode(message: Move, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.direction !== 0) {
      writer.uint32(8).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Move {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Move {
    return { direction: isSet(object.direction) ? directionFromJSON(object.direction) : 0 };
  },

  toJSON(message: Move): unknown {
    const obj: any = {};
    if (message.direction !== 0) {
      obj.direction = directionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Move>, I>>(base?: I): Move {
    return Move.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Move>, I>>(object: I): Move {
    const message = createBaseMove();
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseMine(): Mine {
  return { direction: 0 };
}

export const Mine = {
  encode(message: Mine, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.direction !== 0) {
      writer.uint32(8).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Mine {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mine {
    return { direction: isSet(object.direction) ? directionFromJSON(object.direction) : 0 };
  },

  toJSON(message: Mine): unknown {
    const obj: any = {};
    if (message.direction !== 0) {
      obj.direction = directionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mine>, I>>(base?: I): Mine {
    return Mine.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mine>, I>>(object: I): Mine {
    const message = createBaseMine();
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseAction(): Action {
  return { move: undefined, mine: undefined };
}

export const Action = {
  encode(message: Action, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.move !== undefined) {
      Move.encode(message.move, writer.uint32(10).fork()).ldelim();
    }
    if (message.mine !== undefined) {
      Mine.encode(message.mine, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Action {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.move = Move.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mine = Mine.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action {
    return {
      move: isSet(object.move) ? Move.fromJSON(object.move) : undefined,
      mine: isSet(object.mine) ? Mine.fromJSON(object.mine) : undefined,
    };
  },

  toJSON(message: Action): unknown {
    const obj: any = {};
    if (message.move !== undefined) {
      obj.move = Move.toJSON(message.move);
    }
    if (message.mine !== undefined) {
      obj.mine = Mine.toJSON(message.mine);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action>, I>>(base?: I): Action {
    return Action.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action>, I>>(object: I): Action {
    const message = createBaseAction();
    message.move = (object.move !== undefined && object.move !== null) ? Move.fromPartial(object.move) : undefined;
    message.mine = (object.mine !== undefined && object.mine !== null) ? Mine.fromPartial(object.mine) : undefined;
    return message;
  },
};

function createBaseSignal(): Signal {
  return { woodType: 0 };
}

export const Signal = {
  encode(message: Signal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.woodType !== 0) {
      writer.uint32(8).int32(message.woodType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Signal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.woodType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Signal {
    return { woodType: isSet(object.woodType) ? woodTypeFromJSON(object.woodType) : 0 };
  },

  toJSON(message: Signal): unknown {
    const obj: any = {};
    if (message.woodType !== 0) {
      obj.woodType = woodTypeToJSON(message.woodType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Signal>, I>>(base?: I): Signal {
    return Signal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Signal>, I>>(object: I): Signal {
    const message = createBaseSignal();
    message.woodType = object.woodType ?? 0;
    return message;
  },
};

function createBaseGameResponse(): GameResponse {
  return { action: undefined, signal: undefined };
}

export const GameResponse = {
  encode(message: GameResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.action !== undefined) {
      Action.encode(message.action, writer.uint32(10).fork()).ldelim();
    }
    if (message.signal !== undefined) {
      Signal.encode(message.signal, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = Action.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signal = Signal.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameResponse {
    return {
      action: isSet(object.action) ? Action.fromJSON(object.action) : undefined,
      signal: isSet(object.signal) ? Signal.fromJSON(object.signal) : undefined,
    };
  },

  toJSON(message: GameResponse): unknown {
    const obj: any = {};
    if (message.action !== undefined) {
      obj.action = Action.toJSON(message.action);
    }
    if (message.signal !== undefined) {
      obj.signal = Signal.toJSON(message.signal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameResponse>, I>>(base?: I): GameResponse {
    return GameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameResponse>, I>>(object: I): GameResponse {
    const message = createBaseGameResponse();
    message.action = (object.action !== undefined && object.action !== null)
      ? Action.fromPartial(object.action)
      : undefined;
    message.signal = (object.signal !== undefined && object.signal !== null)
      ? Signal.fromPartial(object.signal)
      : undefined;
    return message;
  },
};

function createBaseGameMap(): GameMap {
  return { players: [], lengthUnits: 0, grid: undefined };
}

export const GameMap = {
  encode(message: GameMap, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.players) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.lengthUnits !== 0) {
      writer.uint32(16).int32(message.lengthUnits);
    }
    if (message.grid !== undefined) {
      Grid.encode(message.grid, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameMap {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.players.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.players.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lengthUnits = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.grid = Grid.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameMap {
    return {
      players: globalThis.Array.isArray(object?.players) ? object.players.map((e: any) => playerFromJSON(e)) : [],
      lengthUnits: isSet(object.lengthUnits) ? globalThis.Number(object.lengthUnits) : 0,
      grid: isSet(object.grid) ? Grid.fromJSON(object.grid) : undefined,
    };
  },

  toJSON(message: GameMap): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => playerToJSON(e));
    }
    if (message.lengthUnits !== 0) {
      obj.lengthUnits = Math.round(message.lengthUnits);
    }
    if (message.grid !== undefined) {
      obj.grid = Grid.toJSON(message.grid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameMap>, I>>(base?: I): GameMap {
    return GameMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameMap>, I>>(object: I): GameMap {
    const message = createBaseGameMap();
    message.players = object.players?.map((e) => e) || [];
    message.lengthUnits = object.lengthUnits ?? 0;
    message.grid = (object.grid !== undefined && object.grid !== null) ? Grid.fromPartial(object.grid) : undefined;
    return message;
  },
};

function createBaseGameConfig(): GameConfig {
  return { players: [], gameMap: undefined, gameLength: 0 };
}

export const GameConfig = {
  encode(message: GameConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.players) {
      GameConfig_PlayerConfig.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.gameMap !== undefined) {
      GameMap.encode(message.gameMap, writer.uint32(18).fork()).ldelim();
    }
    if (message.gameLength !== 0) {
      writer.uint32(24).int32(message.gameLength);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.players.push(GameConfig_PlayerConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gameMap = GameMap.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.gameLength = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameConfig {
    return {
      players: globalThis.Array.isArray(object?.players)
        ? object.players.map((e: any) => GameConfig_PlayerConfig.fromJSON(e))
        : [],
      gameMap: isSet(object.gameMap) ? GameMap.fromJSON(object.gameMap) : undefined,
      gameLength: isSet(object.gameLength) ? globalThis.Number(object.gameLength) : 0,
    };
  },

  toJSON(message: GameConfig): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => GameConfig_PlayerConfig.toJSON(e));
    }
    if (message.gameMap !== undefined) {
      obj.gameMap = GameMap.toJSON(message.gameMap);
    }
    if (message.gameLength !== 0) {
      obj.gameLength = Math.round(message.gameLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameConfig>, I>>(base?: I): GameConfig {
    return GameConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameConfig>, I>>(object: I): GameConfig {
    const message = createBaseGameConfig();
    message.players = object.players?.map((e) => GameConfig_PlayerConfig.fromPartial(e)) || [];
    message.gameMap = (object.gameMap !== undefined && object.gameMap !== null)
      ? GameMap.fromPartial(object.gameMap)
      : undefined;
    message.gameLength = object.gameLength ?? 0;
    return message;
  },
};

function createBaseGameConfig_PlayerConfig(): GameConfig_PlayerConfig {
  return { player: 0, description: "", strategy: "", config: "" };
}

export const GameConfig_PlayerConfig = {
  encode(message: GameConfig_PlayerConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.player !== 0) {
      writer.uint32(8).int32(message.player);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.strategy !== "") {
      writer.uint32(26).string(message.strategy);
    }
    if (message.config !== "") {
      writer.uint32(34).string(message.config);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameConfig_PlayerConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameConfig_PlayerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.player = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.strategy = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.config = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameConfig_PlayerConfig {
    return {
      player: isSet(object.player) ? playerFromJSON(object.player) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      strategy: isSet(object.strategy) ? globalThis.String(object.strategy) : "",
      config: isSet(object.config) ? globalThis.String(object.config) : "",
    };
  },

  toJSON(message: GameConfig_PlayerConfig): unknown {
    const obj: any = {};
    if (message.player !== 0) {
      obj.player = playerToJSON(message.player);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.strategy !== "") {
      obj.strategy = message.strategy;
    }
    if (message.config !== "") {
      obj.config = message.config;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameConfig_PlayerConfig>, I>>(base?: I): GameConfig_PlayerConfig {
    return GameConfig_PlayerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameConfig_PlayerConfig>, I>>(object: I): GameConfig_PlayerConfig {
    const message = createBaseGameConfig_PlayerConfig();
    message.player = object.player ?? 0;
    message.description = object.description ?? "";
    message.strategy = object.strategy ?? "";
    message.config = object.config ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
